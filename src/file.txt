[{'filename': 'x.c', 'place': 2019, 'code': 'diff --git a/x.c b/x.c\nindex 8a16faa..ddf4178 100644\n--- a/x.c\n+++ b/x.c\n@@ -105,6 +105,7 @@ typedef struct {\n \tXSetWindowAttributes attrs;\n \tint scr;\n \tint isfixed; /* is fixed geometry? */\n+\tint depth; /* bit depth */\n \tint l, t; /* left and top offset */\n \tint gm; /* geometry mask */\n } XWindow;\n@@ -243,6 +244,7 @@ static char *usedfont = NULL;\n static double usedfontsize = 0;\n static double defaultfontsize = 0;\n \n+static char *opt_alpha = NULL;\n static char *opt_class = NULL;\n static char **opt_cmd  = NULL;\n static char *opt_embed = NULL;\n@@ -736,7 +738,7 @@ xresize(int col, int row)\n \n \tXFreePixmap(xw.dpy, xw.buf);\n \txw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h,\n-\t\t\tDefaultDepth(xw.dpy, xw.scr));\n+\t\t\txw.depth);\n \tXftDrawChange(xw.draw, xw.buf);\n \txclear(0, 0, win.w, win.h);\n \n@@ -796,6 +798,13 @@ xloadcols(void)\n \t\t\telse\n \t\t\t\tdie("could not allocate color %d\\n", i);\n \t\t}\n+\n+\t/* set alpha value of bg color */\n+\tif (opt_alpha)\n+\t\talpha = strtof(opt_alpha, NULL);\n+\tdc.col[defaultbg].color.alpha = (unsigned short)(0xffff * alpha);\n+\tdc.col[defaultbg].pixel &= 0x00FFFFFF;\n+\tdc.col[defaultbg].pixel |= (unsigned char)(0xff * alpha) << 24;\n \tloaded = 1;\n }\n \n@@ -1118,11 +1127,23 @@ xinit(int cols, int rows)\n \tWindow parent;\n \tpid_t thispid = getpid();\n \tXColor xmousefg, xmousebg;\n+\tXWindowAttributes attr;\n+\tXVisualInfo vis;\n \n \tif (!(xw.dpy = XOpenDisplay(NULL)))\n \t\tdie("can\'t open display\\n");\n \txw.scr = XDefaultScreen(xw.dpy);\n-\txw.vis = XDefaultVisual(xw.dpy, xw.scr);\n+\n+\tif (!(opt_embed && (parent = strtol(opt_embed, NULL, 0)))) {\n+\t\tparent = XRootWindow(xw.dpy, xw.scr);\n+\t\txw.depth = 32;\n+\t} else {\n+\t\tXGetWindowAttributes(xw.dpy, parent, &attr);\n+\t\txw.depth = attr.depth;\n+\t}\n+\n+\tXMatchVisualInfo(xw.dpy, xw.scr, xw.depth, TrueColor, &vis);\n+\txw.vis = vis.visual;\n \n \t/* font */\n \tif (!FcInit())\n@@ -1132,7 +1153,7 @@ xinit(int cols, int rows)\n \txloadfonts(usedfont, 0);\n \n \t/* colors */\n-\txw.cmap = XDefaultColormap(xw.dpy, xw.scr);\n+\txw.cmap = XCreateColormap(xw.dpy, parent, xw.vis, None);\n \txloadcols();\n \n \t/* adjust fixed window geometry */\n@@ -1152,19 +1173,15 @@ xinit(int cols, int rows)\n \t\t| ButtonMotionMask | ButtonPressMask | ButtonReleaseMask;\n \txw.attrs.colormap = xw.cmap;\n \n-\tif (!(opt_embed && (parent = strtol(opt_embed, NULL, 0))))\n-\t\tparent = XRootWindow(xw.dpy, xw.scr);\n \txw.win = XCreateWindow(xw.dpy, parent, xw.l, xw.t,\n-\t\t\twin.w, win.h, 0, XDefaultDepth(xw.dpy, xw.scr), InputOutput,\n+\t\t\twin.w, win.h, 0, xw.depth, InputOutput,\n \t\t\txw.vis, CWBackPixel | CWBorderPixel | CWBitGravity\n \t\t\t| CWEventMask | CWColormap, &xw.attrs);\n \n \tmemset(&gcvalues, 0, sizeof(gcvalues));\n \tgcvalues.graphics_exposures = False;\n-\tdc.gc = XCreateGC(xw.dpy, parent, GCGraphicsExposures,\n-\t\t\t&gcvalues);\n-\txw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h,\n-\t\t\tDefaultDepth(xw.dpy, xw.scr));\n+\txw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h, xw.depth);\n+\tdc.gc = XCreateGC(xw.dpy, xw.buf, GCGraphicsExposures, &gcvalues);\n \tXSetForeground(xw.dpy, dc.gc, dc.col[defaultbg].pixel);\n \tXFillRectangle(xw.dpy, xw.buf, dc.gc, 0, 0, win.w, win.h);\n \n@@ -2019,6 +2036,9 @@ main(int argc, char *argv[])\n \tcase \'a\':\n \t\tallowaltscreen = 0;\n \t\tbreak;\n+\tcase \'A\':\n+\t\topt_alpha = EARGF(usage());\n+\t\tbreak;\n \tcase \'c\':\n \t\topt_class = EARGF(usage());\n \t\tbreak;\n'}, {'filename': 'x.c', 'place': 2019, 'code': 'diff --git a/x.c b/x.c\nindex 8a16faa..ddf4178 100644\n--- a/x.c\n+++ b/x.c\n@@ -105,6 +105,7 @@ typedef struct {\n \tXSetWindowAttributes attrs;\n \tint scr;\n \tint isfixed; /* is fixed geometry? */\n+\tint depth; /* bit depth */\n \tint l, t; /* left and top offset */\n \tint gm; /* geometry mask */\n } XWindow;\n@@ -243,6 +244,7 @@ static char *usedfont = NULL;\n static double usedfontsize = 0;\n static double defaultfontsize = 0;\n \n+static char *opt_alpha = NULL;\n static char *opt_class = NULL;\n static char **opt_cmd  = NULL;\n static char *opt_embed = NULL;\n@@ -736,7 +738,7 @@ xresize(int col, int row)\n \n \tXFreePixmap(xw.dpy, xw.buf);\n \txw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h,\n-\t\t\tDefaultDepth(xw.dpy, xw.scr));\n+\t\t\txw.depth);\n \tXftDrawChange(xw.draw, xw.buf);\n \txclear(0, 0, win.w, win.h);\n \n@@ -796,6 +798,13 @@ xloadcols(void)\n \t\t\telse\n \t\t\t\tdie("could not allocate color %d\\n", i);\n \t\t}\n+\n+\t/* set alpha value of bg color */\n+\tif (opt_alpha)\n+\t\talpha = strtof(opt_alpha, NULL);\n+\tdc.col[defaultbg].color.alpha = (unsigned short)(0xffff * alpha);\n+\tdc.col[defaultbg].pixel &= 0x00FFFFFF;\n+\tdc.col[defaultbg].pixel |= (unsigned char)(0xff * alpha) << 24;\n \tloaded = 1;\n }\n \n@@ -1118,11 +1127,23 @@ xinit(int cols, int rows)\n \tWindow parent;\n \tpid_t thispid = getpid();\n \tXColor xmousefg, xmousebg;\n+\tXWindowAttributes attr;\n+\tXVisualInfo vis;\n \n \tif (!(xw.dpy = XOpenDisplay(NULL)))\n \t\tdie("can\'t open display\\n");\n \txw.scr = XDefaultScreen(xw.dpy);\n-\txw.vis = XDefaultVisual(xw.dpy, xw.scr);\n+\n+\tif (!(opt_embed && (parent = strtol(opt_embed, NULL, 0)))) {\n+\t\tparent = XRootWindow(xw.dpy, xw.scr);\n+\t\txw.depth = 32;\n+\t} else {\n+\t\tXGetWindowAttributes(xw.dpy, parent, &attr);\n+\t\txw.depth = attr.depth;\n+\t}\n+\n+\tXMatchVisualInfo(xw.dpy, xw.scr, xw.depth, TrueColor, &vis);\n+\txw.vis = vis.visual;\n \n \t/* font */\n \tif (!FcInit())\n@@ -1132,7 +1153,7 @@ xinit(int cols, int rows)\n \txloadfonts(usedfont, 0);\n \n \t/* colors */\n-\txw.cmap = XDefaultColormap(xw.dpy, xw.scr);\n+\txw.cmap = XCreateColormap(xw.dpy, parent, xw.vis, None);\n \txloadcols();\n \n \t/* adjust fixed window geometry */\n@@ -1152,19 +1173,15 @@ xinit(int cols, int rows)\n \t\t| ButtonMotionMask | ButtonPressMask | ButtonReleaseMask;\n \txw.attrs.colormap = xw.cmap;\n \n-\tif (!(opt_embed && (parent = strtol(opt_embed, NULL, 0))))\n-\t\tparent = XRootWindow(xw.dpy, xw.scr);\n \txw.win = XCreateWindow(xw.dpy, parent, xw.l, xw.t,\n-\t\t\twin.w, win.h, 0, XDefaultDepth(xw.dpy, xw.scr), InputOutput,\n+\t\t\twin.w, win.h, 0, xw.depth, InputOutput,\n \t\t\txw.vis, CWBackPixel | CWBorderPixel | CWBitGravity\n \t\t\t| CWEventMask | CWColormap, &xw.attrs);\n \n \tmemset(&gcvalues, 0, sizeof(gcvalues));\n \tgcvalues.graphics_exposures = False;\n-\tdc.gc = XCreateGC(xw.dpy, parent, GCGraphicsExposures,\n-\t\t\t&gcvalues);\n-\txw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h,\n-\t\t\tDefaultDepth(xw.dpy, xw.scr));\n+\txw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h, xw.depth);\n+\tdc.gc = XCreateGC(xw.dpy, xw.buf, GCGraphicsExposures, &gcvalues);\n \tXSetForeground(xw.dpy, dc.gc, dc.col[defaultbg].pixel);\n \tXFillRectangle(xw.dpy, xw.buf, dc.gc, 0, 0, win.w, win.h);\n \n@@ -2019,6 +2036,9 @@ main(int argc, char *argv[])\n \tcase \'a\':\n \t\tallowaltscreen = 0;\n \t\tbreak;\n+\tcase \'A\':\n+\t\topt_alpha = EARGF(usage());\n+\t\tbreak;\n \tcase \'c\':\n \t\topt_class = EARGF(usage());\n \t\tbreak;\n'}, {'filename': 'x.c', 'place': 2019, 'code': 'diff --git a/x.c b/x.c\nindex 8a16faa..ddf4178 100644\n--- a/x.c\n+++ b/x.c\n@@ -105,6 +105,7 @@ typedef struct {\n \tXSetWindowAttributes attrs;\n \tint scr;\n \tint isfixed; /* is fixed geometry? */\n+\tint depth; /* bit depth */\n \tint l, t; /* left and top offset */\n \tint gm; /* geometry mask */\n } XWindow;\n@@ -243,6 +244,7 @@ static char *usedfont = NULL;\n static double usedfontsize = 0;\n static double defaultfontsize = 0;\n \n+static char *opt_alpha = NULL;\n static char *opt_class = NULL;\n static char **opt_cmd  = NULL;\n static char *opt_embed = NULL;\n@@ -736,7 +738,7 @@ xresize(int col, int row)\n \n \tXFreePixmap(xw.dpy, xw.buf);\n \txw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h,\n-\t\t\tDefaultDepth(xw.dpy, xw.scr));\n+\t\t\txw.depth);\n \tXftDrawChange(xw.draw, xw.buf);\n \txclear(0, 0, win.w, win.h);\n \n@@ -796,6 +798,13 @@ xloadcols(void)\n \t\t\telse\n \t\t\t\tdie("could not allocate color %d\\n", i);\n \t\t}\n+\n+\t/* set alpha value of bg color */\n+\tif (opt_alpha)\n+\t\talpha = strtof(opt_alpha, NULL);\n+\tdc.col[defaultbg].color.alpha = (unsigned short)(0xffff * alpha);\n+\tdc.col[defaultbg].pixel &= 0x00FFFFFF;\n+\tdc.col[defaultbg].pixel |= (unsigned char)(0xff * alpha) << 24;\n \tloaded = 1;\n }\n \n@@ -1118,11 +1127,23 @@ xinit(int cols, int rows)\n \tWindow parent;\n \tpid_t thispid = getpid();\n \tXColor xmousefg, xmousebg;\n+\tXWindowAttributes attr;\n+\tXVisualInfo vis;\n \n \tif (!(xw.dpy = XOpenDisplay(NULL)))\n \t\tdie("can\'t open display\\n");\n \txw.scr = XDefaultScreen(xw.dpy);\n-\txw.vis = XDefaultVisual(xw.dpy, xw.scr);\n+\n+\tif (!(opt_embed && (parent = strtol(opt_embed, NULL, 0)))) {\n+\t\tparent = XRootWindow(xw.dpy, xw.scr);\n+\t\txw.depth = 32;\n+\t} else {\n+\t\tXGetWindowAttributes(xw.dpy, parent, &attr);\n+\t\txw.depth = attr.depth;\n+\t}\n+\n+\tXMatchVisualInfo(xw.dpy, xw.scr, xw.depth, TrueColor, &vis);\n+\txw.vis = vis.visual;\n \n \t/* font */\n \tif (!FcInit())\n@@ -1132,7 +1153,7 @@ xinit(int cols, int rows)\n \txloadfonts(usedfont, 0);\n \n \t/* colors */\n-\txw.cmap = XDefaultColormap(xw.dpy, xw.scr);\n+\txw.cmap = XCreateColormap(xw.dpy, parent, xw.vis, None);\n \txloadcols();\n \n \t/* adjust fixed window geometry */\n@@ -1152,19 +1173,15 @@ xinit(int cols, int rows)\n \t\t| ButtonMotionMask | ButtonPressMask | ButtonReleaseMask;\n \txw.attrs.colormap = xw.cmap;\n \n-\tif (!(opt_embed && (parent = strtol(opt_embed, NULL, 0))))\n-\t\tparent = XRootWindow(xw.dpy, xw.scr);\n \txw.win = XCreateWindow(xw.dpy, parent, xw.l, xw.t,\n-\t\t\twin.w, win.h, 0, XDefaultDepth(xw.dpy, xw.scr), InputOutput,\n+\t\t\twin.w, win.h, 0, xw.depth, InputOutput,\n \t\t\txw.vis, CWBackPixel | CWBorderPixel | CWBitGravity\n \t\t\t| CWEventMask | CWColormap, &xw.attrs);\n \n \tmemset(&gcvalues, 0, sizeof(gcvalues));\n \tgcvalues.graphics_exposures = False;\n-\tdc.gc = XCreateGC(xw.dpy, parent, GCGraphicsExposures,\n-\t\t\t&gcvalues);\n-\txw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h,\n-\t\t\tDefaultDepth(xw.dpy, xw.scr));\n+\txw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h, xw.depth);\n+\tdc.gc = XCreateGC(xw.dpy, xw.buf, GCGraphicsExposures, &gcvalues);\n \tXSetForeground(xw.dpy, dc.gc, dc.col[defaultbg].pixel);\n \tXFillRectangle(xw.dpy, xw.buf, dc.gc, 0, 0, win.w, win.h);\n \n@@ -2019,6 +2036,9 @@ main(int argc, char *argv[])\n \tcase \'a\':\n \t\tallowaltscreen = 0;\n \t\tbreak;\n+\tcase \'A\':\n+\t\topt_alpha = EARGF(usage());\n+\t\tbreak;\n \tcase \'c\':\n \t\topt_class = EARGF(usage());\n \t\tbreak;\n'}, {'filename': 'x.c', 'place': 2019, 'code': 'diff --git a/x.c b/x.c\nindex 8a16faa..ddf4178 100644\n--- a/x.c\n+++ b/x.c\n@@ -105,6 +105,7 @@ typedef struct {\n \tXSetWindowAttributes attrs;\n \tint scr;\n \tint isfixed; /* is fixed geometry? */\n+\tint depth; /* bit depth */\n \tint l, t; /* left and top offset */\n \tint gm; /* geometry mask */\n } XWindow;\n@@ -243,6 +244,7 @@ static char *usedfont = NULL;\n static double usedfontsize = 0;\n static double defaultfontsize = 0;\n \n+static char *opt_alpha = NULL;\n static char *opt_class = NULL;\n static char **opt_cmd  = NULL;\n static char *opt_embed = NULL;\n@@ -736,7 +738,7 @@ xresize(int col, int row)\n \n \tXFreePixmap(xw.dpy, xw.buf);\n \txw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h,\n-\t\t\tDefaultDepth(xw.dpy, xw.scr));\n+\t\t\txw.depth);\n \tXftDrawChange(xw.draw, xw.buf);\n \txclear(0, 0, win.w, win.h);\n \n@@ -796,6 +798,13 @@ xloadcols(void)\n \t\t\telse\n \t\t\t\tdie("could not allocate color %d\\n", i);\n \t\t}\n+\n+\t/* set alpha value of bg color */\n+\tif (opt_alpha)\n+\t\talpha = strtof(opt_alpha, NULL);\n+\tdc.col[defaultbg].color.alpha = (unsigned short)(0xffff * alpha);\n+\tdc.col[defaultbg].pixel &= 0x00FFFFFF;\n+\tdc.col[defaultbg].pixel |= (unsigned char)(0xff * alpha) << 24;\n \tloaded = 1;\n }\n \n@@ -1118,11 +1127,23 @@ xinit(int cols, int rows)\n \tWindow parent;\n \tpid_t thispid = getpid();\n \tXColor xmousefg, xmousebg;\n+\tXWindowAttributes attr;\n+\tXVisualInfo vis;\n \n \tif (!(xw.dpy = XOpenDisplay(NULL)))\n \t\tdie("can\'t open display\\n");\n \txw.scr = XDefaultScreen(xw.dpy);\n-\txw.vis = XDefaultVisual(xw.dpy, xw.scr);\n+\n+\tif (!(opt_embed && (parent = strtol(opt_embed, NULL, 0)))) {\n+\t\tparent = XRootWindow(xw.dpy, xw.scr);\n+\t\txw.depth = 32;\n+\t} else {\n+\t\tXGetWindowAttributes(xw.dpy, parent, &attr);\n+\t\txw.depth = attr.depth;\n+\t}\n+\n+\tXMatchVisualInfo(xw.dpy, xw.scr, xw.depth, TrueColor, &vis);\n+\txw.vis = vis.visual;\n \n \t/* font */\n \tif (!FcInit())\n@@ -1132,7 +1153,7 @@ xinit(int cols, int rows)\n \txloadfonts(usedfont, 0);\n \n \t/* colors */\n-\txw.cmap = XDefaultColormap(xw.dpy, xw.scr);\n+\txw.cmap = XCreateColormap(xw.dpy, parent, xw.vis, None);\n \txloadcols();\n \n \t/* adjust fixed window geometry */\n@@ -1152,19 +1173,15 @@ xinit(int cols, int rows)\n \t\t| ButtonMotionMask | ButtonPressMask | ButtonReleaseMask;\n \txw.attrs.colormap = xw.cmap;\n \n-\tif (!(opt_embed && (parent = strtol(opt_embed, NULL, 0))))\n-\t\tparent = XRootWindow(xw.dpy, xw.scr);\n \txw.win = XCreateWindow(xw.dpy, parent, xw.l, xw.t,\n-\t\t\twin.w, win.h, 0, XDefaultDepth(xw.dpy, xw.scr), InputOutput,\n+\t\t\twin.w, win.h, 0, xw.depth, InputOutput,\n \t\t\txw.vis, CWBackPixel | CWBorderPixel | CWBitGravity\n \t\t\t| CWEventMask | CWColormap, &xw.attrs);\n \n \tmemset(&gcvalues, 0, sizeof(gcvalues));\n \tgcvalues.graphics_exposures = False;\n-\tdc.gc = XCreateGC(xw.dpy, parent, GCGraphicsExposures,\n-\t\t\t&gcvalues);\n-\txw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h,\n-\t\t\tDefaultDepth(xw.dpy, xw.scr));\n+\txw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h, xw.depth);\n+\tdc.gc = XCreateGC(xw.dpy, xw.buf, GCGraphicsExposures, &gcvalues);\n \tXSetForeground(xw.dpy, dc.gc, dc.col[defaultbg].pixel);\n \tXFillRectangle(xw.dpy, xw.buf, dc.gc, 0, 0, win.w, win.h);\n \n@@ -2019,6 +2036,9 @@ main(int argc, char *argv[])\n \tcase \'a\':\n \t\tallowaltscreen = 0;\n \t\tbreak;\n+\tcase \'A\':\n+\t\topt_alpha = EARGF(usage());\n+\t\tbreak;\n \tcase \'c\':\n \t\topt_class = EARGF(usage());\n \t\tbreak;\n'}]
